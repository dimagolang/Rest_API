package main

import (
	"database/sql"
	"log"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	_ "github.com/lib/pq"
)

var db *sql.DB

func initDB() {
	var err error

	dsn := "postgres://postgres:postgres@localhost:5432/flights_db?sslmode=disable"

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å 10 –ø–æ–ø—ã—Ç–∫–∞–º–∏
	for i := 1; i <= 10; i++ {
		db, err = sql.Open("postgres", dsn)
		if err != nil {
			log.Printf("Attempt %d: Error opening database connection: %v\n", i, err)
		} else if err = db.Ping(); err == nil {
			log.Println("‚úÖ Connected to PostgreSQL!")
			return
		} else {
			log.Printf("Attempt %d: Error pinging database: %v\n", i, err)
		}

		log.Println("‚è≥ Waiting for database... Attempt", i)
		time.Sleep(3 * time.Second)
	}

	log.Fatal("‚ùå Failed to connect to database after multiple attempts:", err)
}

// ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

func main() {
	gin.SetMode(gin.ReleaseMode)
	r := gin.Default()
	r.SetTrustedProxies(nil)

	initDB()
	defer db.Close() // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ

	r.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"status": "ok"})
	})

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Å–∞–º–∏
	r.POST("/flights", createFlight)       // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–π—Å–∞
	r.GET("/flights/:id", getFlight)       // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Å–∞ –ø–æ ID
	r.PUT("/flights/:id", updateFlight)    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞ –ø–æ ID
	r.DELETE("/flights/:id", deleteFlight) // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞ –ø–æ ID

	log.Println("üöÄ Server is running on port 8083...")
	if err := r.Run(":8083"); err != nil {
		log.Fatal("‚ùå Failed to start server:", err)
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–∞
func createFlight(c *gin.Context) {
	// –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–∞
	c.JSON(http.StatusCreated, gin.H{"message": "Flight created"})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Å–∞
func getFlight(c *gin.Context) {
	id := c.Param("id")
	// –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Å–∞ –ø–æ ID
	c.JSON(http.StatusOK, gin.H{"message": "Flight details", "id": id})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞
func updateFlight(c *gin.Context) {
	id := c.Param("id")
	// –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞ –ø–æ ID
	c.JSON(http.StatusOK, gin.H{"message": "Flight updated", "id": id})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞
func deleteFlight(c *gin.Context) {
	id := c.Param("id")
	// –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞ –ø–æ ID
	c.JSON(http.StatusOK, gin.H{"message": "Flight deleted", "id": id})
}
